// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ROLE {
    USER
    SELLER
    ADMIN
    BANNED
}

model Purchase {
    id          Int     @id @default(autoincrement())
    purchaser   User    @relation(fields: [purchaserId], references: [username])
    purchaserId String
    item        Item[]
    itemId      Int[]
    price       Float
    itemShipped Boolean @default(false)
}

model Image {
    id        Int      @id @default(autoincrement())
    url       String   @unique
    path      String
    profile   Profile? @relation(fields: [profileId], references: [id])
    profileId Int?
    item      Item?    @relation(fields: [itemId], references: [id])
    itemId    Int?
}

model SellerDetails {
    id          Int     @id @default(autoincrement())
    drawers     Boolean @default(false)
    videos      Boolean @default(false)
    webcamChats Boolean @default(false)
    photos      Boolean @default(false)
    sexting     Boolean @default(false)
    user        User    @relation(fields: [userName], references: [username])
    userName    String  @unique
}

model ModelStatus {
    id       Int      @id @default(autoincrement())
    status   String   @db.Text
    posted   DateTime @default(now())
    user     User     @relation(fields: [userName], references: [username])
    userName String
}

model Tag {
    value          String    @id
    formattedValue String
    items          Item[]
    posts          Post[]
    profiles       Profile[]
}

model Post {
    id      Int    @id @default(autoincrement())
    content String
    user    User   @relation(fields: [userId], references: [username])
    userId  String
    tags    Tag[]
}

model Profile {
    id           Int     @id @default(autoincrement())
    user         User    @relation(fields: [userName], references: [username])
    userName     String  @unique
    firstName    String
    lastName     String
    images       Image[]
    introduction String?
    location     String?
    interests    String
    tags         Tag[]
}

model User {
    username      String         @id
    email         String         @unique
    password      String
    role          ROLE           @default(USER)
    createdAt     DateTime       @default(now())
    purchases     Purchase[]
    items         Item[]
    posts         Post[]
    comments      Comment[]
    profile       Profile?
    statuses      ModelStatus[]
    sellerDetails SellerDetails?
}

model Comment {
    id        Int       @id @default(autoincrement())
    author    User      @relation(fields: [authorId], references: [username])
    authorId  String
    content   String
    createdAt DateTime  @default(now())
    likes     Int       @default(0)
    replyIds  Int
    replies   Comment   @relation("replies", fields: [replyIds], references: [id])
    replys    Comment[] @relation("replies")
    Item      Item?     @relation(fields: [itemId], references: [id])
    itemId    Int?
}

model Item {
    id          Int       @id @default(autoincrement())
    price       Float
    seller      User      @relation(fields: [sellerId], references: [username])
    sellerId    String
    description String?
    Purchase    Purchase  @relation(fields: [purchaseId], references: [id])
    images      Image[]
    comments    Comment[]
    purchaseId  Int
    createAt    DateTime  @default(now())
    tags        Tag[]
}
